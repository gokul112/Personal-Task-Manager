{"ast":null,"code":"import { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport data from \"./data\";\n\nconst board = (state = {\n  lists: []\n}, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n        return {\n          lists: [...state.lists, listId]\n        };\n      }\n\n    case \"MOVE_LIST\":\n      {\n        const {\n          oldListIndex,\n          newListIndex\n        } = action.payload;\n        const newLists = Array.from(state.lists);\n        const [removedList] = newLists.splice(oldListIndex, 1);\n        newLists.splice(newListIndex, 0, removedList);\n        return {\n          lists: newLists\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n\n        const filterDeleted = tmpListId => tmpListId !== listId;\n\n        const newLists = state.lists.filter(filterDeleted);\n        return {\n          lists: newLists\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst listsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const {\n          listId,\n          listTitle\n        } = action.payload;\n        return { ...state,\n          [listId]: {\n            id: listId,\n            title: listTitle,\n            cards: []\n          }\n        };\n      }\n\n    case \"CHANGE_LIST_TITLE\":\n      {\n        const {\n          listId,\n          listTitle\n        } = action.payload;\n        return { ...state,\n          [listId]: { ...state[listId],\n            title: listTitle\n          }\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n        const {\n          [listId]: deletedList,\n          ...restOfLists\n        } = state;\n        return restOfLists;\n      }\n\n    case \"ADD_CARD\":\n      {\n        const {\n          listId,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [listId]: { ...state[listId],\n            cards: [...state[listId].cards, cardId]\n          }\n        };\n      }\n\n    case \"MOVE_CARD\":\n      {\n        const {\n          oldCardIndex,\n          newCardIndex,\n          sourceListId,\n          destListId\n        } = action.payload; // Move within the same list\n\n        if (sourceListId === destListId) {\n          const newCards = Array.from(state[sourceListId].cards);\n          const [removedCard] = newCards.splice(oldCardIndex, 1);\n          newCards.splice(newCardIndex, 0, removedCard);\n          return { ...state,\n            [sourceListId]: { ...state[sourceListId],\n              cards: newCards\n            }\n          };\n        } // Move card from one list to another\n\n\n        const sourceCards = Array.from(state[sourceListId].cards);\n        const [removedCard] = sourceCards.splice(oldCardIndex, 1);\n        const destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return { ...state,\n          [sourceListId]: { ...state[sourceListId],\n            cards: sourceCards\n          },\n          [destListId]: { ...state[destListId],\n            cards: destinationCards\n          }\n        };\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const {\n          cardId: deletedCardId,\n          listId\n        } = action.payload;\n\n        const filterDeleted = cardId => cardId !== deletedCardId;\n\n        return { ...state,\n          [listId]: { ...state[listId],\n            cards: state[listId].cards.filter(filterDeleted)\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst cardsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_CARD\":\n      {\n        const {\n          cardText,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [cardId]: {\n            text: cardText,\n            id: cardId\n          }\n        };\n      }\n\n    case \"CHANGE_CARD_TEXT\":\n      {\n        const {\n          cardText,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [cardId]: { ...state[cardId],\n            text: cardText\n          }\n        };\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const {\n          cardId\n        } = action.payload;\n        const {\n          [cardId]: deletedCard,\n          ...restOfCards\n        } = state;\n        return restOfCards;\n      }\n    // Find every card from the deleted list and remove it\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          cards: cardIds\n        } = action.payload;\n        return Object.keys(state).filter(cardId => !cardIds.includes(cardId)).reduce((newState, cardId) => ({ ...newState,\n          [cardId]: state[cardId]\n        }), {});\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  board,\n  listsById,\n  cardsById\n});\n\nconst saveState = state => {\n  try {\n    const stateData = JSON.stringify(state);\n    localStorage.setItem(\"state\", stateData);\n  } catch {// ignore write errors\n  }\n};\n\nconst loadState = () => {\n  try {\n    const stateData = localStorage.getItem(\"state\");\n\n    if (stateData === null) {\n      return undefined;\n    }\n\n    return JSON.parse(stateData);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst savedState = loadState();\nconst store = createStore(reducers, savedState);\nstore.subscribe(throttle(() => {\n  saveState(store.getState());\n}, 1000));\nconsole.log(store.getState());\n\nif (!store.getState().board.lists.length) {\n  console.log(\"data feed\");\n  data(store);\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/graj/projects/task_board/task_board/src/store.js"],"names":["combineReducers","createStore","throttle","data","board","state","lists","action","type","listId","payload","oldListIndex","newListIndex","newLists","Array","from","removedList","splice","filterDeleted","tmpListId","filter","listsById","listTitle","id","title","cards","deletedList","restOfLists","cardId","oldCardIndex","newCardIndex","sourceListId","destListId","newCards","removedCard","sourceCards","destinationCards","deletedCardId","cardsById","cardText","text","deletedCard","restOfCards","cardIds","Object","keys","includes","reduce","newState","reducers","saveState","stateData","JSON","stringify","localStorage","setItem","loadState","getItem","undefined","parse","err","savedState","store","subscribe","getState","console","log","length"],"mappings":"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","sourcesContent":["import { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport data from \"./data\";\n\nconst board = (state = { lists: [] }, action) => {\n    switch (action.type) {\n      case \"ADD_LIST\": {\n        const { listId } = action.payload;\n        return { lists: [...state.lists, listId] };\n      }\n      case \"MOVE_LIST\": {\n        const { oldListIndex, newListIndex } = action.payload;\n        const newLists = Array.from(state.lists);\n        const [removedList] = newLists.splice(oldListIndex, 1);\n        newLists.splice(newListIndex, 0, removedList);\n        return { lists: newLists };\n      }\n      case \"DELETE_LIST\": {\n        const { listId } = action.payload;\n        const filterDeleted = tmpListId => tmpListId !== listId;\n        const newLists = state.lists.filter(filterDeleted);\n        return { lists: newLists };\n      }\n      default:\n        return state;\n    }\n  };\n\n  const listsById = (state = {}, action) => {\n    switch (action.type) {\n      case \"ADD_LIST\": {\n        const { listId, listTitle } = action.payload;\n        return {\n          ...state,\n          [listId]: { id: listId, title: listTitle, cards: []}\n        };\n      }\n      case \"CHANGE_LIST_TITLE\": {\n        const { listId, listTitle } = action.payload;\n        return {\n          ...state,\n          [listId]: { ...state[listId], title: listTitle }\n        };\n      }\n      case \"DELETE_LIST\": {\n        const { listId } = action.payload;\n        const { [listId]: deletedList, ...restOfLists } = state;\n        return restOfLists;\n      }\n      case \"ADD_CARD\": {\n        const { listId, cardId } = action.payload;\n        return {\n          ...state,\n          [listId]: { ...state[listId], cards: [...state[listId].cards, cardId] }\n        };\n      }\n      case \"MOVE_CARD\": {\n        const {\n          oldCardIndex,\n          newCardIndex,\n          sourceListId,\n          destListId\n        } = action.payload;\n        // Move within the same list\n        if (sourceListId === destListId) {\n          const newCards = Array.from(state[sourceListId].cards);\n          const [removedCard] = newCards.splice(oldCardIndex, 1);\n          newCards.splice(newCardIndex, 0, removedCard);\n          return {\n            ...state,\n            [sourceListId]: { ...state[sourceListId], cards: newCards }\n          };\n        }\n        // Move card from one list to another\n        const sourceCards = Array.from(state[sourceListId].cards);\n        const [removedCard] = sourceCards.splice(oldCardIndex, 1);\n        const destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return {\n          ...state,\n          [sourceListId]: { ...state[sourceListId], cards: sourceCards },\n          [destListId]: { ...state[destListId], cards: destinationCards }\n        };\n      }\n      case \"DELETE_CARD\": {\n        const { cardId: deletedCardId, listId } = action.payload;\n        const filterDeleted = cardId => cardId !== deletedCardId;\n        return {\n            ...state,\n            [listId]: {\n              ...state[listId],\n              cards: state[listId].cards.filter(filterDeleted)\n            }\n        };\n      }\n      default:\n        return state;\n    }\n  };\n\n\n  const cardsById = (state = {}, action) => {\n    switch (action.type) {\n      case \"ADD_CARD\": {\n        const { cardText, cardId } = action.payload;\n        return { ...state, [cardId]: { text: cardText, id: cardId } };\n      }\n      case \"CHANGE_CARD_TEXT\": {\n        const { cardText, cardId } = action.payload;\n        return { ...state, [cardId]: { ...state[cardId], text: cardText } };\n      }\n      case \"DELETE_CARD\": {\n        const { cardId } = action.payload;\n        const { [cardId]: deletedCard, ...restOfCards } = state;\n        return restOfCards;\n      }\n      // Find every card from the deleted list and remove it\n      case \"DELETE_LIST\": {\n        const { cards: cardIds } = action.payload;\n        return Object.keys(state)\n          .filter(cardId => !cardIds.includes(cardId))\n          .reduce(\n            (newState, cardId) => ({ ...newState, [cardId]: state[cardId] }),\n            {}\n          );\n      }\n      default:\n        return state;\n    }\n  };\n\n\nconst reducers = combineReducers({\n    board,\n    listsById,\n    cardsById\n});\n\nconst saveState = state => {\n    try {\n      const stateData = JSON.stringify(state);\n      localStorage.setItem(\"state\", stateData);\n    } catch {\n      // ignore write errors\n    }\n};\n\nconst loadState = () => {\n    try {\n      const stateData = localStorage.getItem(\"state\");\n      if (stateData === null) {\n        return undefined;\n      }\n      return JSON.parse(stateData);\n    } catch (err) {\n      return undefined;\n    }\n};\n\nconst savedState = loadState();\nconst store = createStore(reducers, savedState);\n\nstore.subscribe(\n  throttle(() => {\n    saveState(store.getState());\n  }, 1000)\n);\n\nconsole.log(store.getState());\nif (!store.getState().board.lists.length) {\n  console.log(\"data feed\");\n  data(store);\n}\n\nexport default store;\n\n\n\n"]},"metadata":{},"sourceType":"module"}